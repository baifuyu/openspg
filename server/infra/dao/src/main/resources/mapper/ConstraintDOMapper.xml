<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2023 OpenSPG Authors
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software distributed under the License
  ~ is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
  ~ or implied.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.antgroup.openspg.server.infra.dao.mapper.ConstraintDOMapper">
  <resultMap id="BaseResultMap" type="com.antgroup.openspg.server.infra.dao.dataobject.ConstraintDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="name_zh" jdbcType="VARCHAR" property="nameZh" />
    <result column="is_require" jdbcType="CHAR" property="isRequire" />
    <result column="up_down_boundary" jdbcType="CHAR" property="upDownBoundary" />
    <result column="max_value" jdbcType="VARCHAR" property="maxValue" />
    <result column="min_value" jdbcType="VARCHAR" property="minValue" />
    <result column="value_pattern" jdbcType="VARCHAR" property="valuePattern" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="description_zh" jdbcType="VARCHAR" property="descriptionZh" />
    <result column="is_unique" jdbcType="CHAR" property="isUnique" />
    <result column="is_enum" jdbcType="CHAR" property="isEnum" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
    <result column="is_multi_value" jdbcType="CHAR" property="isMultiValue" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.antgroup.openspg.server.infra.dao.dataobject.ConstraintDO">
    <result column="enum_value" jdbcType="LONGVARCHAR" property="enumValue" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, name_zh, is_require, up_down_boundary, max_value, min_value, value_pattern, 
    description, description_zh, is_unique, is_enum, gmt_create, gmt_modified, is_multi_value
  </sql>
  <sql id="Blob_Column_List">
    enum_value
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ConstraintDOExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from kg_ontology_property_constraint
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${@com.antgroup.openspg.server.infra.dao.SecurityUtils@trimSql4OrderBy(orderByClause)}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ConstraintDOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from kg_ontology_property_constraint
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${@com.antgroup.openspg.server.infra.dao.SecurityUtils@trimSql4OrderBy(orderByClause)}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from kg_ontology_property_constraint
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from kg_ontology_property_constraint
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ConstraintDOExample">
    delete from kg_ontology_property_constraint
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ConstraintDO">
    insert into kg_ontology_property_constraint (id, name, name_zh, 
      is_require, up_down_boundary, max_value, 
      min_value, value_pattern, description, 
      description_zh, is_unique, is_enum, 
      gmt_create, gmt_modified, is_multi_value, 
      enum_value)
    values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{nameZh,jdbcType=VARCHAR}, 
      #{isRequire,jdbcType=CHAR}, #{upDownBoundary,jdbcType=CHAR}, #{maxValue,jdbcType=VARCHAR}, 
      #{minValue,jdbcType=VARCHAR}, #{valuePattern,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{descriptionZh,jdbcType=VARCHAR}, #{isUnique,jdbcType=CHAR}, #{isEnum,jdbcType=CHAR}, 
      #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP}, #{isMultiValue,jdbcType=CHAR}, 
      #{enumValue,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ConstraintDO">
    insert into kg_ontology_property_constraint
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="nameZh != null">
        name_zh,
      </if>
      <if test="isRequire != null">
        is_require,
      </if>
      <if test="upDownBoundary != null">
        up_down_boundary,
      </if>
      <if test="maxValue != null">
        max_value,
      </if>
      <if test="minValue != null">
        min_value,
      </if>
      <if test="valuePattern != null">
        value_pattern,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="descriptionZh != null">
        description_zh,
      </if>
      <if test="isUnique != null">
        is_unique,
      </if>
      <if test="isEnum != null">
        is_enum,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtModified != null">
        gmt_modified,
      </if>
      <if test="isMultiValue != null">
        is_multi_value,
      </if>
      <if test="enumValue != null">
        enum_value,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="nameZh != null">
        #{nameZh,jdbcType=VARCHAR},
      </if>
      <if test="isRequire != null">
        #{isRequire,jdbcType=CHAR},
      </if>
      <if test="upDownBoundary != null">
        #{upDownBoundary,jdbcType=CHAR},
      </if>
      <if test="maxValue != null">
        #{maxValue,jdbcType=VARCHAR},
      </if>
      <if test="minValue != null">
        #{minValue,jdbcType=VARCHAR},
      </if>
      <if test="valuePattern != null">
        #{valuePattern,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="descriptionZh != null">
        #{descriptionZh,jdbcType=VARCHAR},
      </if>
      <if test="isUnique != null">
        #{isUnique,jdbcType=CHAR},
      </if>
      <if test="isEnum != null">
        #{isEnum,jdbcType=CHAR},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        #{gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="isMultiValue != null">
        #{isMultiValue,jdbcType=CHAR},
      </if>
      <if test="enumValue != null">
        #{enumValue,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ConstraintDOExample" resultType="java.lang.Long">
    select count(*) from kg_ontology_property_constraint
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update kg_ontology_property_constraint
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.nameZh != null">
        name_zh = #{record.nameZh,jdbcType=VARCHAR},
      </if>
      <if test="record.isRequire != null">
        is_require = #{record.isRequire,jdbcType=CHAR},
      </if>
      <if test="record.upDownBoundary != null">
        up_down_boundary = #{record.upDownBoundary,jdbcType=CHAR},
      </if>
      <if test="record.maxValue != null">
        max_value = #{record.maxValue,jdbcType=VARCHAR},
      </if>
      <if test="record.minValue != null">
        min_value = #{record.minValue,jdbcType=VARCHAR},
      </if>
      <if test="record.valuePattern != null">
        value_pattern = #{record.valuePattern,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.descriptionZh != null">
        description_zh = #{record.descriptionZh,jdbcType=VARCHAR},
      </if>
      <if test="record.isUnique != null">
        is_unique = #{record.isUnique,jdbcType=CHAR},
      </if>
      <if test="record.isEnum != null">
        is_enum = #{record.isEnum,jdbcType=CHAR},
      </if>
      <if test="record.gmtCreate != null">
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gmtModified != null">
        gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isMultiValue != null">
        is_multi_value = #{record.isMultiValue,jdbcType=CHAR},
      </if>
      <if test="record.enumValue != null">
        enum_value = #{record.enumValue,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update kg_ontology_property_constraint
    set id = #{record.id,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      name_zh = #{record.nameZh,jdbcType=VARCHAR},
      is_require = #{record.isRequire,jdbcType=CHAR},
      up_down_boundary = #{record.upDownBoundary,jdbcType=CHAR},
      max_value = #{record.maxValue,jdbcType=VARCHAR},
      min_value = #{record.minValue,jdbcType=VARCHAR},
      value_pattern = #{record.valuePattern,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      description_zh = #{record.descriptionZh,jdbcType=VARCHAR},
      is_unique = #{record.isUnique,jdbcType=CHAR},
      is_enum = #{record.isEnum,jdbcType=CHAR},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      is_multi_value = #{record.isMultiValue,jdbcType=CHAR},
      enum_value = #{record.enumValue,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update kg_ontology_property_constraint
    set id = #{record.id,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      name_zh = #{record.nameZh,jdbcType=VARCHAR},
      is_require = #{record.isRequire,jdbcType=CHAR},
      up_down_boundary = #{record.upDownBoundary,jdbcType=CHAR},
      max_value = #{record.maxValue,jdbcType=VARCHAR},
      min_value = #{record.minValue,jdbcType=VARCHAR},
      value_pattern = #{record.valuePattern,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      description_zh = #{record.descriptionZh,jdbcType=VARCHAR},
      is_unique = #{record.isUnique,jdbcType=CHAR},
      is_enum = #{record.isEnum,jdbcType=CHAR},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      is_multi_value = #{record.isMultiValue,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ConstraintDO">
    update kg_ontology_property_constraint
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="nameZh != null">
        name_zh = #{nameZh,jdbcType=VARCHAR},
      </if>
      <if test="isRequire != null">
        is_require = #{isRequire,jdbcType=CHAR},
      </if>
      <if test="upDownBoundary != null">
        up_down_boundary = #{upDownBoundary,jdbcType=CHAR},
      </if>
      <if test="maxValue != null">
        max_value = #{maxValue,jdbcType=VARCHAR},
      </if>
      <if test="minValue != null">
        min_value = #{minValue,jdbcType=VARCHAR},
      </if>
      <if test="valuePattern != null">
        value_pattern = #{valuePattern,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="descriptionZh != null">
        description_zh = #{descriptionZh,jdbcType=VARCHAR},
      </if>
      <if test="isUnique != null">
        is_unique = #{isUnique,jdbcType=CHAR},
      </if>
      <if test="isEnum != null">
        is_enum = #{isEnum,jdbcType=CHAR},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="isMultiValue != null">
        is_multi_value = #{isMultiValue,jdbcType=CHAR},
      </if>
      <if test="enumValue != null">
        enum_value = #{enumValue,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ConstraintDO">
    update kg_ontology_property_constraint
    set name = #{name,jdbcType=VARCHAR},
      name_zh = #{nameZh,jdbcType=VARCHAR},
      is_require = #{isRequire,jdbcType=CHAR},
      up_down_boundary = #{upDownBoundary,jdbcType=CHAR},
      max_value = #{maxValue,jdbcType=VARCHAR},
      min_value = #{minValue,jdbcType=VARCHAR},
      value_pattern = #{valuePattern,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      description_zh = #{descriptionZh,jdbcType=VARCHAR},
      is_unique = #{isUnique,jdbcType=CHAR},
      is_enum = #{isEnum,jdbcType=CHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      is_multi_value = #{isMultiValue,jdbcType=CHAR},
      enum_value = #{enumValue,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ConstraintDO">
    update kg_ontology_property_constraint
    set name = #{name,jdbcType=VARCHAR},
      name_zh = #{nameZh,jdbcType=VARCHAR},
      is_require = #{isRequire,jdbcType=CHAR},
      up_down_boundary = #{upDownBoundary,jdbcType=CHAR},
      max_value = #{maxValue,jdbcType=VARCHAR},
      min_value = #{minValue,jdbcType=VARCHAR},
      value_pattern = #{valuePattern,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      description_zh = #{descriptionZh,jdbcType=VARCHAR},
      is_unique = #{isUnique,jdbcType=CHAR},
      is_enum = #{isEnum,jdbcType=CHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      is_multi_value = #{isMultiValue,jdbcType=CHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>