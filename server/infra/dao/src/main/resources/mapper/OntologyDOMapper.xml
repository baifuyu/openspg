<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2023 Ant Group CO., Ltd.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software distributed under the License
  ~ is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
  ~ or implied.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.antgroup.openspg.server.infra.dao.mapper.OntologyDOMapper">
  <resultMap id="BaseResultMap" type="com.antgroup.openspg.server.infra.dao.dataobject.OntologyDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="original_id" jdbcType="BIGINT" property="originalId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="name_zh" jdbcType="VARCHAR" property="nameZh" />
    <result column="entity_category" jdbcType="VARCHAR" property="entityCategory" />
    <result column="layer" jdbcType="VARCHAR" property="layer" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="description_zh" jdbcType="VARCHAR" property="descriptionZh" />
    <result column="status" jdbcType="CHAR" property="status" />
    <result column="with_index" jdbcType="VARCHAR" property="withIndex" />
    <result column="scope" jdbcType="VARCHAR" property="scope" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="version_status" jdbcType="VARCHAR" property="versionStatus" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
    <result column="transformer_id" jdbcType="BIGINT" property="transformerId" />
    <result column="unique_name" jdbcType="VARCHAR" property="uniqueName" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.antgroup.openspg.server.infra.dao.dataobject.OntologyDOWithBLOBs">
    <result column="operator_config" jdbcType="LONGVARCHAR" property="operatorConfig" />
    <result column="config" jdbcType="LONGVARCHAR" property="config" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, original_id, name, name_zh, entity_category, layer, description, description_zh, 
    status, with_index, scope, version, version_status, gmt_create, gmt_modified, transformer_id, 
    unique_name
  </sql>
  <sql id="Blob_Column_List">
    operator_config, config
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.OntologyDOExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from kg_ontology_entity
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${@com.antgroup.openspg.server.infra.dao.SecurityUtils@trimSql4OrderBy(orderByClause)}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.OntologyDOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from kg_ontology_entity
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${@com.antgroup.openspg.server.infra.dao.SecurityUtils@trimSql4OrderBy(orderByClause)}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from kg_ontology_entity
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from kg_ontology_entity
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.OntologyDOExample">
    delete from kg_ontology_entity
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.OntologyDOWithBLOBs">
    insert into kg_ontology_entity (id, original_id, name, 
      name_zh, entity_category, layer, 
      description, description_zh, status, 
      with_index, scope, version, 
      version_status, gmt_create, gmt_modified, 
      transformer_id, unique_name, operator_config, 
      config)
    values (#{id,jdbcType=BIGINT}, #{originalId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, 
      #{nameZh,jdbcType=VARCHAR}, #{entityCategory,jdbcType=VARCHAR}, #{layer,jdbcType=VARCHAR}, 
      #{description,jdbcType=VARCHAR}, #{descriptionZh,jdbcType=VARCHAR}, #{status,jdbcType=CHAR}, 
      #{withIndex,jdbcType=VARCHAR}, #{scope,jdbcType=VARCHAR}, #{version,jdbcType=INTEGER}, 
      #{versionStatus,jdbcType=VARCHAR}, #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP}, 
      #{transformerId,jdbcType=BIGINT}, #{uniqueName,jdbcType=VARCHAR}, #{operatorConfig,jdbcType=LONGVARCHAR}, 
      #{config,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.OntologyDOWithBLOBs">
    insert into kg_ontology_entity
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="originalId != null">
        original_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="nameZh != null">
        name_zh,
      </if>
      <if test="entityCategory != null">
        entity_category,
      </if>
      <if test="layer != null">
        layer,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="descriptionZh != null">
        description_zh,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="withIndex != null">
        with_index,
      </if>
      <if test="scope != null">
        scope,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="versionStatus != null">
        version_status,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtModified != null">
        gmt_modified,
      </if>
      <if test="transformerId != null">
        transformer_id,
      </if>
      <if test="uniqueName != null">
        unique_name,
      </if>
      <if test="operatorConfig != null">
        operator_config,
      </if>
      <if test="config != null">
        config,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="originalId != null">
        #{originalId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="nameZh != null">
        #{nameZh,jdbcType=VARCHAR},
      </if>
      <if test="entityCategory != null">
        #{entityCategory,jdbcType=VARCHAR},
      </if>
      <if test="layer != null">
        #{layer,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="descriptionZh != null">
        #{descriptionZh,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=CHAR},
      </if>
      <if test="withIndex != null">
        #{withIndex,jdbcType=VARCHAR},
      </if>
      <if test="scope != null">
        #{scope,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="versionStatus != null">
        #{versionStatus,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        #{gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="transformerId != null">
        #{transformerId,jdbcType=BIGINT},
      </if>
      <if test="uniqueName != null">
        #{uniqueName,jdbcType=VARCHAR},
      </if>
      <if test="operatorConfig != null">
        #{operatorConfig,jdbcType=LONGVARCHAR},
      </if>
      <if test="config != null">
        #{config,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.OntologyDOExample" resultType="java.lang.Long">
    select count(*) from kg_ontology_entity
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update kg_ontology_entity
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.originalId != null">
        original_id = #{record.originalId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.nameZh != null">
        name_zh = #{record.nameZh,jdbcType=VARCHAR},
      </if>
      <if test="record.entityCategory != null">
        entity_category = #{record.entityCategory,jdbcType=VARCHAR},
      </if>
      <if test="record.layer != null">
        layer = #{record.layer,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.descriptionZh != null">
        description_zh = #{record.descriptionZh,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=CHAR},
      </if>
      <if test="record.withIndex != null">
        with_index = #{record.withIndex,jdbcType=VARCHAR},
      </if>
      <if test="record.scope != null">
        scope = #{record.scope,jdbcType=VARCHAR},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.versionStatus != null">
        version_status = #{record.versionStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.gmtCreate != null">
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gmtModified != null">
        gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="record.transformerId != null">
        transformer_id = #{record.transformerId,jdbcType=BIGINT},
      </if>
      <if test="record.uniqueName != null">
        unique_name = #{record.uniqueName,jdbcType=VARCHAR},
      </if>
      <if test="record.operatorConfig != null">
        operator_config = #{record.operatorConfig,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.config != null">
        config = #{record.config,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update kg_ontology_entity
    set id = #{record.id,jdbcType=BIGINT},
      original_id = #{record.originalId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      name_zh = #{record.nameZh,jdbcType=VARCHAR},
      entity_category = #{record.entityCategory,jdbcType=VARCHAR},
      layer = #{record.layer,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      description_zh = #{record.descriptionZh,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=CHAR},
      with_index = #{record.withIndex,jdbcType=VARCHAR},
      scope = #{record.scope,jdbcType=VARCHAR},
      version = #{record.version,jdbcType=INTEGER},
      version_status = #{record.versionStatus,jdbcType=VARCHAR},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      transformer_id = #{record.transformerId,jdbcType=BIGINT},
      unique_name = #{record.uniqueName,jdbcType=VARCHAR},
      operator_config = #{record.operatorConfig,jdbcType=LONGVARCHAR},
      config = #{record.config,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update kg_ontology_entity
    set id = #{record.id,jdbcType=BIGINT},
      original_id = #{record.originalId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      name_zh = #{record.nameZh,jdbcType=VARCHAR},
      entity_category = #{record.entityCategory,jdbcType=VARCHAR},
      layer = #{record.layer,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      description_zh = #{record.descriptionZh,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=CHAR},
      with_index = #{record.withIndex,jdbcType=VARCHAR},
      scope = #{record.scope,jdbcType=VARCHAR},
      version = #{record.version,jdbcType=INTEGER},
      version_status = #{record.versionStatus,jdbcType=VARCHAR},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      transformer_id = #{record.transformerId,jdbcType=BIGINT},
      unique_name = #{record.uniqueName,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.OntologyDOWithBLOBs">
    update kg_ontology_entity
    <set>
      <if test="originalId != null">
        original_id = #{originalId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="nameZh != null">
        name_zh = #{nameZh,jdbcType=VARCHAR},
      </if>
      <if test="entityCategory != null">
        entity_category = #{entityCategory,jdbcType=VARCHAR},
      </if>
      <if test="layer != null">
        layer = #{layer,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="descriptionZh != null">
        description_zh = #{descriptionZh,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=CHAR},
      </if>
      <if test="withIndex != null">
        with_index = #{withIndex,jdbcType=VARCHAR},
      </if>
      <if test="scope != null">
        scope = #{scope,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="versionStatus != null">
        version_status = #{versionStatus,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="transformerId != null">
        transformer_id = #{transformerId,jdbcType=BIGINT},
      </if>
      <if test="uniqueName != null">
        unique_name = #{uniqueName,jdbcType=VARCHAR},
      </if>
      <if test="operatorConfig != null">
        operator_config = #{operatorConfig,jdbcType=LONGVARCHAR},
      </if>
      <if test="config != null">
        config = #{config,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.OntologyDOWithBLOBs">
    update kg_ontology_entity
    set original_id = #{originalId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      name_zh = #{nameZh,jdbcType=VARCHAR},
      entity_category = #{entityCategory,jdbcType=VARCHAR},
      layer = #{layer,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      description_zh = #{descriptionZh,jdbcType=VARCHAR},
      status = #{status,jdbcType=CHAR},
      with_index = #{withIndex,jdbcType=VARCHAR},
      scope = #{scope,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER},
      version_status = #{versionStatus,jdbcType=VARCHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      transformer_id = #{transformerId,jdbcType=BIGINT},
      unique_name = #{uniqueName,jdbcType=VARCHAR},
      operator_config = #{operatorConfig,jdbcType=LONGVARCHAR},
      config = #{config,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.OntologyDO">
    update kg_ontology_entity
    set original_id = #{originalId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      name_zh = #{nameZh,jdbcType=VARCHAR},
      entity_category = #{entityCategory,jdbcType=VARCHAR},
      layer = #{layer,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      description_zh = #{descriptionZh,jdbcType=VARCHAR},
      status = #{status,jdbcType=CHAR},
      with_index = #{withIndex,jdbcType=VARCHAR},
      scope = #{scope,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER},
      version_status = #{versionStatus,jdbcType=VARCHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      transformer_id = #{transformerId,jdbcType=BIGINT},
      unique_name = #{uniqueName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>